import numpy as np
from math import log
#import matplotlib.pyplot as plt
import csv
import math
import copy

#Set p value (1,2,3,7,15)
p = 1

##########Read File###########
def y_data(filename):
	'''
		This function is for adding y value in list
	'''
	file = open(filename , 'r')
	add_y = []
	y = []
	a = csv.reader(file)
	for row in a : 
		add_y.append(row[0])
	for iy in add_y:
		integer = int(iy)
		if integer == 3:
			y.append(float(1))
		else:
			y.append(float(-1))
	y_to_array = np.array(y)
	return y_to_array

def x_data(filename):
	'''
		This function is for x value without y value
	'''
	file = open(filename, 'r') 
	add_x = []
	for row in file:
		tmp = []						#each row creates a list
		for x in row.split(','):		
			tmp.append(float(x.strip()))
		tmp.append(float(1))		
		add_x.append(tmp[1:])
	x_to_array = np.array(add_x)			# x list convert to x array

	return x_to_array




#############Kernel Perceptron for train##############
def Kernel_Perceptron_Train(x, y):
	'''
		X = N*F, a = N*1, y = N*1 
	'''
	# p_value = [1, 2, 3, 7, 15]
	N = x.shape[0]					#4888
	a = np.zeros(x.shape[0])		
	a_for_array = []


	# for p in p_value:
	# 	print("p: ", p)
	for it in range(0,15):
		count = 0
		for i  in range(0, N): 
			u = 0
			for j in range(0, N):
				kp = (1 + np.dot(x[j], x[i].T)) ** p
				u = u + kp*a[j]*y[j] 
			if (y[i]*u) <= 0:
				count += 1
				a[i] += 1
		a_for_array.append(copy.deepcopy(a))
		accuracy = 1- count/N
		print("train:", accuracy)
	return a_for_array

	



#############Kernel Perceptron for validation##############
def Kernel_Perceptron_Valid(x, y, x_v, y_v):
	'''
	'''
	# a = np.array(Kernel_Perceptron_Train(x_array_train, y_array_train))			# Train data's a
	a = [0.907733224222586, 0.9361702127659575, 0.9382160392798691, 0.944762684124386, 0.948240589198036, 0.9484451718494271, 0.9490589198036007, 0.9490589198036007, 0.9511047463175123, 0.9517184942716858, 0.9519230769230769, 0.9556055646481179, 0.9535597381342062, 0.9566284779050737, 0.9513093289689034]
	N = x_v.shape[0]


	for it in range(0,15):
		count = 0
		print(a[it])
		#u=0
		for i  in range(0, N): 
			u = 0
			for j in range(0, N):
				u=0
				kp = (1 + np.dot(x_v[j], x_v[i].T)) ** p
				u = u + kp*a[it]*y_v[j] 
				#print("a:",a[it])
			if (y_v[i]*u) <= 0:
				count += 1
		accuracy = 1- count/N
		print("validation:", accuracy)
	return a





############Main Function############
#train.csv
y_array_train = y_data('pa2_train.csv')
x_array_train = x_data('pa2_train.csv')

#valid.csv
y_array_valid = y_data('pa2_valid.csv')
x_array_valid = x_data('pa2_valid.csv')


# Kernel_Perceptron_Train(x_array_train, y_array_train)
Kernel_Perceptron_Valid(x_array_train, y_array_train, x_array_valid, y_array_valid)


